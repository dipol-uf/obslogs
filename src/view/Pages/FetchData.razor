@page "/fetchdata"

@using DIPolWeb.FetchData
@using System.Globalization

@inject HttpClient _http
@inject ISearchSpecificationProvider _searchSpecificationProvider

<h1>Dipol observations</h1>

<p>A log of DIPol-2 and DIPol-UF observations.</p>
<p>
    <div class="input-group mb-4 w-75">
        <input
            type="text"
            value="@Value"
            @onkeydown="SearchField_OnKeyDown"
            @oninput="SearchField_OnInput"
            class="form-control mr-2"/>
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="FilterData" type="submit">Search</button>
        </div>
    </div>
</p>

@*First time loading, no data is yet available*@
@if (_observations.Length == 0)
{
    <p><em>Loading...</em></p>
}
@*The table is empty -> no entries match search criteria*@
else if (Items.TryGetNonEnumeratedCount(out var count) && count == 0 || !Items.Any())
{
    <p><em>No observation satisfies given criteria.</em></p>
}
else
{
    if (Items.TryGetNonEnumeratedCount(out count))
    {
        if (string.IsNullOrWhiteSpace(Value))
        {
            <p><em>Database contains</em> <code>@count</code> <em>entries.</em></p>
        }
        else
        {
            <p><code>@count</code> / <code>@_observations.Length</code> <em>entries match search criteria.</em></p>
        }
    }
    else
    {
        <p><em>Unable to count entries in the table.</em></p>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Object</th>
                <th>Exposure (s)</th>
                <th>Images</th>
                <th>Instrument</th>
                <th>Telescope</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obs in Items)
            {
            <tr>
                <td>@obs.Date.ToString("yyyy/MM/dd", DateTimeFormatInfo.InvariantInfo)</td>
                <td>@obs.Object</td>
                <td>@(obs.ExpTime?.ToString("F1") ?? "??")</td>
                <td>@(@obs.N.ToString() ?? "??")</td>
                <td>@obs.Instrument</td>
                <td>@obs.Telescope</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private DipolObservation[] _observations = Array.Empty<DipolObservation>();
    private bool _shouldRender = true;
    private string Value { get; set; } = string.Empty;

    private IEnumerable<DipolObservation> Items { get; set; } = Enumerable.Empty<DipolObservation>();

    private void FilterData()
    {
        var val = Value;
        IEnumerable<DipolObservation> newObservations;
        ISearchSpecification spec;

        if (string.IsNullOrWhiteSpace(val))
        {
            newObservations = _observations;
        }
        else
        {
            spec = _searchSpecificationProvider.GetSpecification(val);
            newObservations = _observations.Where(obs => spec.SatisfiesConditions(obs)).ToList();
        }


        if (ReferenceEquals(newObservations, Items))
        {
            return;
        }

        Items = newObservations;
       
        _shouldRender = true;

    }

    protected override async Task OnInitializedAsync()
    {
        _observations = await _http.GetFromJsonAsync<DipolObservation[]>("sample-data/obslog.json")
                        ?? throw new InvalidOperationException("Failed to load data");

        Items = _observations;
    }

    protected override bool ShouldRender()
    {
        if (_shouldRender)
        {
            _shouldRender = false;
            return true;
        }
        return false;
    }


    private void SearchField_OnKeyDown(KeyboardEventArgs obj)
    {
        if (obj.Code == "Enter")
        {
            FilterData();
        }
    }

    private void SearchField_OnInput(ChangeEventArgs obj)
    {
        if (obj.Value is string newString)
        {
            Value = newString;
            if (string.IsNullOrWhiteSpace(newString))
            {
                FilterData();
            }
            else
            {
                _shouldRender = false;
            }
        }
    }

  

}
