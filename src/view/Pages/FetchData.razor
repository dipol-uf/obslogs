@page "/fetchdata"
@using System.Text.Json.Serialization
@using System.Globalization
@inject HttpClient _http

<h1>Dipol observations</h1>

<p>A log of DIPol-2 and DIPol-UF observations.</p>
<p>
    <input @bind="Value"/>
    <button class="btn btn-primary" @onclick="FilterData">Search</button>
</p>

@if (_observations is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Object</th>
                <th>Exposure (s)</th>
                <th>Images</th>
                <th>Instrument</th>
                <th>Telescope</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obs in Items() ?? Enumerable.Empty<DipolObservation>())
            {
            <tr>
                <td>@obs.Date.ToString("yyyy/MM/dd", DateTimeFormatInfo.InvariantInfo)</td>
                <td>@obs.Object</td>
                <td>@(obs.ExpTime?.ToString("F1") ?? "??")</td>
                <td>@(@obs.N.ToString() ?? "??")</td>
                <td>@obs.Instrument</td>
                <td>@obs.Telescope</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private DipolObservation[]? _observations;
    public string? Value { get; set; }

    private IEnumerable<DipolObservation>? Items()
    {
        var val = Value;
        if (string.IsNullOrWhiteSpace(val))
        {
            return _observations;
        }

        return _observations?.Where(Filter);

        bool Filter(DipolObservation obs) => obs.Object.AsSpan().Contains(val, StringComparison.OrdinalIgnoreCase);
    }

    private async Task FilterData()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        _observations = await _http.GetFromJsonAsync<DipolObservation[]>("sample-data/obslog.json");
    }


    internal record DipolObservation(
        [property:JsonPropertyName("Date")] string DateStr,
        string Object,
        string? Type,
        double? ExpTime,
        int? N,
        double? Focus,
        [property:JsonPropertyName("Inst")] string Instrument,
        [property:JsonPropertyName("Tlscp")] string Telescope,
        string? Comment
    )
    {
        [JsonIgnore]
        public DateTimeOffset Date => DateTimeOffset.TryParseExact(
            DateStr,
            "yyyy-MM-dd",
            DateTimeFormatInfo.InvariantInfo,
            DateTimeStyles.AssumeUniversal,
            out var date
        ) ? date : default;
    }
}
